// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "5Verst - application for plans the new running events.\n\n### Steps to start working with 5Verst API\n1. Post the suggest about new events.\n2. Get Get the list of suggested events with weather predictions.\n\n### Groups of Methods\n* **Events** for create new events or get the list of events.\n\n****\n\nFind more information\n* about the 5Verst [5verst.ru](https://5verst.ru/)",
    "title": "5 Verst API",
    "contact": {
      "email": "info@5verst.ru"
    },
    "version": "v2-go"
  },
  "paths": {
    "/": {
      "get": {
        "security": [],
        "description": "Method display API description, version and date of build",
        "tags": [
          "Index"
        ],
        "summary": "API description",
        "operationId": "Index",
        "responses": {
          "200": {
            "description": "Success response",
            "schema": {
              "$ref": "#/definitions/index"
            }
          }
        }
      }
    },
    "/events": {
      "get": {
        "security": [],
        "description": "List of Events",
        "tags": [
          "Events"
        ],
        "summary": "List of Events",
        "operationId": "listEvents",
        "parameters": [
          {
            "type": "string",
            "x-example": "rasskazovka",
            "description": "Park where you find events.",
            "name": "park",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "schema": {
              "$ref": "#/definitions/eventsList"
            }
          },
          "400": {
            "description": "(Bad Request) Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/errorBadRequest"
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "schema": {
              "$ref": "#/definitions/errorUnprocessableEntity"
            }
          }
        }
      },
      "post": {
        "security": [],
        "description": "Create new Launcher Project",
        "tags": [
          "Events"
        ],
        "summary": "Create new Launcher Project",
        "operationId": "createEvent",
        "parameters": [
          {
            "description": "Create new Launcher Project",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventsCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success response",
            "schema": {
              "$ref": "#/definitions/event"
            }
          },
          "400": {
            "description": "(Bad Request) Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/errorBadRequest"
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "schema": {
              "$ref": "#/definitions/errorUnprocessableEntity"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "errorBadRequest": {
      "type": "object",
      "title": "ErrorBadRequest",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "HTTP status code.",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "message": {
          "description": "Error message.",
          "type": "string",
          "x-nullable": false
        }
      },
      "example": {
        "code": 400,
        "message": "Bad Request"
      }
    },
    "errorUnprocessableEntity": {
      "type": "object",
      "title": "ErrorUnprocessableEntity",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "HTTP status code.",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "message": {
          "description": "Error message.",
          "type": "string",
          "x-nullable": false
        }
      },
      "example": {
        "code": 422,
        "message": "Unprocessable entity"
      }
    },
    "event": {
      "description": "Launcher Project",
      "type": "object",
      "properties": {
        "created_at": {
          "description": "date of create",
          "type": "string",
          "x-nullable": false
        },
        "date": {
          "description": "Date of event",
          "type": "string"
        },
        "deleted_at": {
          "description": "date of delete",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "ID of Launcher Project",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "Name of event",
          "type": "string"
        },
        "updated_at": {
          "description": "date of update",
          "type": "string",
          "x-nullable": true
        },
        "weather": {
          "description": "Expected weather",
          "type": "object",
          "properties": {
            "kind": {
              "description": "Attribute ID",
              "type": "string"
            },
            "precipitation": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "number",
                  "format": "float"
                },
                "intensity": {
                  "type": "integer",
                  "format": "int64"
                },
                "type": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "temperature": {
              "type": "number",
              "format": "float"
            },
            "wind": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "x-go-type": {
        "import": {
          "package": "github.com/gadzira/5verst/internal/domain"
        },
        "type": "Event"
      }
    },
    "eventsCreate": {
      "description": "Launcher Project",
      "type": "object",
      "required": [
        "name",
        "date",
        "park"
      ],
      "properties": {
        "date": {
          "description": "Date of Event",
          "type": "string",
          "format": "date-time",
          "x-example": "the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z",
          "x-nullable": false
        },
        "name": {
          "description": "Name of New Event",
          "type": "string",
          "maxLength": 21,
          "minLength": 1,
          "x-nullable": false,
          "example": "Fox Paths"
        },
        "park": {
          "description": "Park where it will happen",
          "type": "string",
          "x-nullable": false,
          "example": "Rasskazovka"
        }
      }
    },
    "eventsList": {
      "description": "List of Events",
      "type": "array",
      "items": {
        "x-nullable": false,
        "$ref": "#/definitions/event"
      },
      "x-go-type": {
        "import": {
          "package": "gitlab.local/xsolla-launcher/go-launcher/internal/domain"
        },
        "type": "EventsList"
      }
    },
    "index": {
      "type": "object",
      "title": "Index",
      "properties": {
        "commit": {
          "description": "Commit ID",
          "type": "string"
        },
        "date": {
          "description": "API build date.",
          "type": "string"
        },
        "info": {
          "description": "API description",
          "type": "string"
        },
        "version": {
          "description": "API versionn.",
          "type": "string"
        }
      },
      "example": {
        "date": "02 March 2021",
        "info": "Launcher API",
        "version": "v202100302"
      }
    }
  },
  "parameters": {
    "Authorization_JWT": {
      "type": "string",
      "x-example": "Bearer {JWT}",
      "name": "Authorization",
      "in": "header",
      "required": true
    }
  },
  "securityDefinitions": {
    "JWT": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "JWT": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "5Verst - application for plans the new running events.\n\n### Steps to start working with 5Verst API\n1. Post the suggest about new events.\n2. Get Get the list of suggested events with weather predictions.\n\n### Groups of Methods\n* **Events** for create new events or get the list of events.\n\n****\n\nFind more information\n* about the 5Verst [5verst.ru](https://5verst.ru/)",
    "title": "5 Verst API",
    "contact": {
      "email": "info@5verst.ru"
    },
    "version": "v2-go"
  },
  "paths": {
    "/": {
      "get": {
        "security": [],
        "description": "Method display API description, version and date of build",
        "tags": [
          "Index"
        ],
        "summary": "API description",
        "operationId": "Index",
        "responses": {
          "200": {
            "description": "Success response",
            "schema": {
              "$ref": "#/definitions/index"
            }
          }
        }
      }
    },
    "/events": {
      "get": {
        "security": [],
        "description": "List of Events",
        "tags": [
          "Events"
        ],
        "summary": "List of Events",
        "operationId": "listEvents",
        "parameters": [
          {
            "type": "string",
            "x-example": "rasskazovka",
            "description": "Park where you find events.",
            "name": "park",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "schema": {
              "$ref": "#/definitions/eventsList"
            }
          },
          "400": {
            "description": "(Bad Request) Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/errorBadRequest"
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "schema": {
              "$ref": "#/definitions/errorUnprocessableEntity"
            }
          }
        }
      },
      "post": {
        "security": [],
        "description": "Create new Launcher Project",
        "tags": [
          "Events"
        ],
        "summary": "Create new Launcher Project",
        "operationId": "createEvent",
        "parameters": [
          {
            "description": "Create new Launcher Project",
            "name": "data",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventsCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success response",
            "schema": {
              "$ref": "#/definitions/event"
            }
          },
          "400": {
            "description": "(Bad Request) Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/errorBadRequest"
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "schema": {
              "$ref": "#/definitions/errorUnprocessableEntity"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "EventWeather": {
      "description": "Expected weather",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Attribute ID",
          "type": "string"
        },
        "precipitation": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "number",
              "format": "float"
            },
            "intensity": {
              "type": "integer",
              "format": "int64"
            },
            "type": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "temperature": {
          "type": "number",
          "format": "float"
        },
        "wind": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "EventWeatherPrecipitation": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "float"
        },
        "intensity": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "errorBadRequest": {
      "type": "object",
      "title": "ErrorBadRequest",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "HTTP status code.",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "message": {
          "description": "Error message.",
          "type": "string",
          "x-nullable": false
        }
      },
      "example": {
        "code": 400,
        "message": "Bad Request"
      }
    },
    "errorUnprocessableEntity": {
      "type": "object",
      "title": "ErrorUnprocessableEntity",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "HTTP status code.",
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "message": {
          "description": "Error message.",
          "type": "string",
          "x-nullable": false
        }
      },
      "example": {
        "code": 422,
        "message": "Unprocessable entity"
      }
    },
    "event": {
      "description": "Launcher Project",
      "type": "object",
      "properties": {
        "created_at": {
          "description": "date of create",
          "type": "string",
          "x-nullable": false
        },
        "date": {
          "description": "Date of event",
          "type": "string"
        },
        "deleted_at": {
          "description": "date of delete",
          "type": "string",
          "x-nullable": true
        },
        "id": {
          "description": "ID of Launcher Project",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "Name of event",
          "type": "string"
        },
        "updated_at": {
          "description": "date of update",
          "type": "string",
          "x-nullable": true
        },
        "weather": {
          "description": "Expected weather",
          "type": "object",
          "properties": {
            "kind": {
              "description": "Attribute ID",
              "type": "string"
            },
            "precipitation": {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "number",
                  "format": "float"
                },
                "intensity": {
                  "type": "integer",
                  "format": "int64"
                },
                "type": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "temperature": {
              "type": "number",
              "format": "float"
            },
            "wind": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "x-go-type": {
        "import": {
          "package": "github.com/gadzira/5verst/internal/domain"
        },
        "type": "Event"
      }
    },
    "eventsCreate": {
      "description": "Launcher Project",
      "type": "object",
      "required": [
        "name",
        "date",
        "park"
      ],
      "properties": {
        "date": {
          "description": "Date of Event",
          "type": "string",
          "format": "date-time",
          "x-example": "the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z",
          "x-nullable": false
        },
        "name": {
          "description": "Name of New Event",
          "type": "string",
          "maxLength": 21,
          "minLength": 1,
          "x-nullable": false,
          "example": "Fox Paths"
        },
        "park": {
          "description": "Park where it will happen",
          "type": "string",
          "x-nullable": false,
          "example": "Rasskazovka"
        }
      }
    },
    "eventsList": {
      "description": "List of Events",
      "type": "array",
      "items": {
        "x-nullable": false,
        "$ref": "#/definitions/event"
      },
      "x-go-type": {
        "import": {
          "package": "gitlab.local/xsolla-launcher/go-launcher/internal/domain"
        },
        "type": "EventsList"
      }
    },
    "index": {
      "type": "object",
      "title": "Index",
      "properties": {
        "commit": {
          "description": "Commit ID",
          "type": "string"
        },
        "date": {
          "description": "API build date.",
          "type": "string"
        },
        "info": {
          "description": "API description",
          "type": "string"
        },
        "version": {
          "description": "API versionn.",
          "type": "string"
        }
      },
      "example": {
        "date": "02 March 2021",
        "info": "Launcher API",
        "version": "v202100302"
      }
    }
  },
  "parameters": {
    "Authorization_JWT": {
      "type": "string",
      "x-example": "Bearer {JWT}",
      "name": "Authorization",
      "in": "header",
      "required": true
    }
  },
  "securityDefinitions": {
    "JWT": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "JWT": []
    }
  ]
}`))
}
