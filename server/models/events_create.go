// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventsCreate Launcher Project
//
// swagger:model eventsCreate
type EventsCreate struct {

	// Date of Event
	// Required: true
	// Format: date-time
	Date strfmt.DateTime `json:"date"`

	// Name of New Event
	// Required: true
	// Max Length: 21
	// Min Length: 1
	Name string `json:"name"`

	// Park where it will happen
	// Required: true
	Park string `json:"park"`
}

// Validate validates this events create
func (m *EventsCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePark(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventsCreate) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", strfmt.DateTime(m.Date)); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EventsCreate) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 21); err != nil {
		return err
	}

	return nil
}

func (m *EventsCreate) validatePark(formats strfmt.Registry) error {

	if err := validate.RequiredString("park", "body", string(m.Park)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventsCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventsCreate) UnmarshalBinary(b []byte) error {
	var res EventsCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
